#include<bits/stdc++.h>
using namespace std;

//MEMORY MANAGEMENT
void accept(int a[],int n)
{
	int i;
	for(i=0;i<n;i++)
	{
		scanf("%d",&a[i]);
	}
}
void display(int a[],int n)
{
	int i;
	printf("\n\n");
	for(i=0;i<n;i++)
	{
		printf("\t%d ",a[i]);
	}
}
void sort(int a[],int n)
{
	int i,j,temp;
	for(i=0;i<n-1;i++)
	{
		for(j=0;j<n-1;j++)
		{
			if(a[j]>a[j+1])
			{
				temp=a[j];
				a[j]=a[j+1];
				a[j+1]=temp;
			}
		}
	}
}
void first_fit(int psize[],int np,int msize[],int nm)
{
		int i,j,itot,etot,flag[30]={0};
		itot=etot=0;
	for(i=0;i<np;i++)
	{
		for(j=0;j<nm;j++)
		{
			if(flag[j]==0 && msize[j]>=psize[i])
			{
				flag[j]=1;
				printf("process of size: %d goes to hole: %d\n",psize[i],msize[j]);
				itot=itot+msize[j]-psize[i];
				break;
			}
		}
		if(j==nm)
			printf("\n\nTHERE IS NO SPACE FOR PROCESS %d ",i);
	}
	for(i=0;i<nm;i++)
	{
		if(flag[i]==0)
			etot=etot+msize[i];
	}
	printf("\n\nPROCESSES::");
	display(psize,np);
	printf("\n\nMEMORY HOLES::");
	display(msize,nm);
	printf("\n\nTOTAL SUM OF INTERNAL FRAGMENTATION = %d ",itot);
	printf("\n\nTOTAL SUM OF EXTERNAL FRAGMENTATION = %d ",etot);

}
void best_fit(int psize[],int np,int msize[],int nm)
{
	int i,j,itot,etot,temp[30],flag[30]={0};
	itot=etot=0;

	for(i=0;i<nm;i++)
		temp[i]=msize[i];

	sort(temp,nm);
	for(i=0;i<np;i++)
	{
		for(j=0;j<nm;j++)
		{
			if(flag[j]==0 && temp[j]>=psize[i])
			{
				flag[j]=1;
					printf("process of size: %d goes to hole: %d\n",psize[i],msize[j]);
				itot=itot+temp[j]-psize[i];
				break;
			}
		}
		if(j==nm)
			printf("\n\nTHERE IS NO SPACE FOR PROCESS %d ",i);
	}
	for(i=0;i<nm;i++)
	{
		if(flag[i]==0)
			etot=etot+temp[i];
	}
	printf("\n\nPROCESSES::");
	display(psize,np);
	printf("\n\nMEMORY HOLES::");
	display(temp,nm);
	printf("\n\nTOTAL SUM OF INTERNAL FRAGMENTATION = %d ",itot);
	printf("\n\nTOTAL SUM OF EXTERNAL FRAGMENTATION = %d ",etot);
}
void worst_fit(int psize[],int np,int msize[],int nm)
{
	int i,j,itot,etot,temp[30],flag[30]={0};
	itot=etot=0;
	for(i=0;i<nm;i++)
		temp[i]=msize[i];

	sort(temp,nm);
	for(i=0;i<np;i++)
	{
		for(j=nm-1;j>=0;j--)
		{
			if(flag[j]==0 && temp[j]>=psize[i])
			{
				flag[j]=1;
					printf("process of size: %d goes to hole: %d\n",psize[i],msize[j]);
				itot=itot+temp[j]-psize[i];
				break;
			}
		}
		if(j==nm)
			printf("\n\nTHERE IS NO SPACE FOR PROCESS %d ",i);
	}
	for(i=0;i<nm;i++)
	{
		if(flag[i]==0)
			etot=etot+temp[i];
	}
	printf("\n\nPROCESSES::");
	display(psize,np);
	printf("\n\nMEMORY HOLES::");
	display(temp,nm);
	printf("\n\nTOTAL SUM OF INTERNAL FRAGMENTATION = %d ",itot);
	printf("\n\nTOTAL SUM OF EXTERNAL FRAGMENTATION = %d ",etot);

}
void memorymanagement()
{
	int ch,np,nm,psize[30],msize[30];
	printf("\nENTER NO OF PROCESSES::");
	scanf("%d",&np);
	printf("\n\nENTER SIZES OF PROCESSES::");
	accept(psize,np);
	printf("\nENTER NO MEMORY HOLES::");
	scanf("%d",&nm);
	printf("\n\nENTER SIZES OF MEMORY HOLES::");
	accept(msize,nm);

	while(1)
	{
		printf("\n\n\t\t**MAIN MENU**");
		printf("\n\n\tMEMORY MANAGEMENT");
		printf("\n\n\t1.FIRST FIT");
		printf("\n\n\t2.BEST FIT");
		printf("\n\n\t3.WORST FIT");
		printf("\n\n\t4.QUIT");

		printf("\n\nENTER YOUR CHOICE::");
		scanf("%d",&ch);
		switch(ch)
		{
			case 1:
				printf("\n\nFIRST FIT::\n");
				first_fit(psize,np,msize,nm);
				break;
			case 2:
				printf("\n\nBEST FIT::\n");
				best_fit(psize,np,msize,nm);
				break;
			case 3:
				printf("\n\nWORST FIT::\n");
				worst_fit(psize,np,msize,nm);
				break;
			case 4:
				exit(0);
			default:
				printf("\n\nPLEASE ENTER CORRECT CHOICE!!");
		}
	}
}


//SINGLE LEVEL
typedef struct page
{
	int page_no;
	int frame_no;
}page;

void print1(int f[],int offset[])
{
	cout<<"-------------------------------------------------------------------------------"<<endl;
	cout<<"\t\t";
	for(int i=25;i>=0;i--)
	cout<<f[i];
	cout<<"\t";
	for(int i=0;i<12;i++)
	cout<<offset[i];
	cout<<endl;
	cout<<"-------------------------------------------------------------------------------"<<endl;
}
int BinaryToDecimal1(int arr[],int size)
{
	int k=0;
	int sum=0;
	//cout<<"into the function"<<endl;
	for(int i=size-1;i>=0;i--)
	{
		//cout<<"into the loop"<<endl;
		sum=sum+arr[i]*pow(2,k++);
	//	cout<<sum<<endl;
	}
	return sum;
}

void DecimalToBinary1(int f,int size,int offset[])
{
int arr[26];
int k=0;
memset(arr,0,sizeof(arr));
   while(f>0)
    {
    	int rem=f%2;
    	arr[k++]=rem;
    	f=f/2;
	}
	print1(arr,offset);	
}

void single()
{
//PAGE TABLE
int a[20];
int b[12];
page p[5];
int i;
cout<<"Enter page table"<<endl;
for(i=0;i<5;i++)
{
cin>>p[i].page_no;
cin>>p[i].frame_no;
}
	cout<<"Enter the logical address generated by CPU"<<endl;
	for(int i=0;i<20;i++)
	{	
	cin>>a[i];
	}
	for( i=0;i<12;i++)
	{
	cin>>b[i];
	}
	int pagenumber=BinaryToDecimal1(a,20);
	int offset=BinaryToDecimal1(b,12);
	cout<<"---------------------------------"<<endl;
	cout<<"\t\t"<<pagenumber<<"\t"<<offset<<endl;
	cout<<"---------------------------------"<<endl;
	int frame;
	int flag=0;
	for(i=0;i<5;i++)
	{
	 if(pagenumber==p[i].page_no)
	   { 
	    flag=1;
		frame=p[i].frame_no;
	    break;
	   }
    }
    if(flag==0)
    cout<<"page fault"<<endl;
    else
    {
    	cout<<"Frame Number :"<< frame<<endl;
    	cout<<"Page size :"<<pow(2,12)<<endl;
    	cout<<"Physical Address :"<<frame*pow(2,12)+offset<<endl;
	}
    DecimalToBinary1(frame,26,b);	
}


//MULTI LEVEL PAGING
typedef struct inner
{
	int id;
	int innerp;
	int frame_no;
	
}inner;

typedef struct outer
{
	int outerp;
	int id;
}outer;

void print(int f[],int offset[])
{
	cout<<"-------------------------------------------------------------------------------"<<endl;
	cout<<"| FRAME NUMBER | OFFSET |"<<endl;
	cout<<"| ";
	for(int i=25;i>=0;i--)
	cout<<f[i];
	cout<<"| ";
	for(int i=0;i<12;i++)
	cout<<offset[i];
	cout<<"|"<<endl;
	cout<<"-------------------------------------------------------------------------------"<<endl;
}
long long int BinaryToDecimal(int arr[],int size)
{
	int k=0;
	long long int sum=0;
		for(int i=size-1;i>=0;i--)
	{
		sum=sum+arr[i]*pow(2,k++);
	}
	
	return sum;
}

void DecimalToBinary(int f,int size,int offset[])
{
int arr[26];
int k=0;
memset(arr,0,sizeof(arr));
   while(f>0)
    {
    	int rem=f%2;
    	arr[k++]=rem;
    	f=f/2;
	
	}
	print(arr,offset);	
}

void multi()
{
cout<<"\t\t\t\tTWO LEVEL PAGING\t\t\t"<<endl<<endl;
//OUTER PAGE TABLE
cout<<"Enter outer page table"<<endl;
outer o[20];
for(int i=0;i<5;i++)
{
cin>>o[i].outerp>>o[i].id;
}

//INNER PAGE TABLE
cout<<"Enter inner page table"<<endl;
inner inn[20];
for(int i=0;i<5;i++)
{
	for(int j=0;j<3;j++)
	{
		inn[j].id=i;
		cin>>inn[j].innerp>>inn[j].frame_no;
	}
}
    int p[20];  //20 bits
    int d[12];  //12 bits offset
	cout<<"Enter the logical address generated by CPU"<<endl;
	for(int i=0;i<20;i++)
	cin>>p[i];
	
	for(int i=0;i<12;i++)
	cin>>d[i];
	
	
	long long int pagenumber=BinaryToDecimal(p,20);
	//cout<<pagenumber<<endl;
	long long int offset=BinaryToDecimal(d,12);
	//cout<<offset<<endl;
	cout<<endl<<"------------------------"<<endl;
	cout<<"| PAGE NUMBER | OFFSET |"<<endl
	;
	cout<<"|   "<<pagenumber<<"       |    "<<offset<<"  |"<<endl;
	cout<<"------------------------------"<<endl;
	
	int p1[10];
	int p2[10];
	for(int i=0;i<20;i++)
	{
		if(i<10)
		p1[i]=p[i];
		else
		p2[i-10]=p[i];
	}
	long long int outerpage=BinaryToDecimal(p1,10);
	long long int innerpage=BinaryToDecimal(p2,10);
	cout<<endl<<"-------------------------------------------------------"<<endl;
	cout<<"| OUTER PAGE NUMBER | INNER PAGE NUMBER | OFFSET |"<<endl;
	cout<<"|   "<<outerpage<<"              |      "<<innerpage<<"    |     "<<offset<<"|"<<endl;
	cout<<"--------------------------------------------------------------"<<endl;
    int frame;
    int flagO=0;
    int flagI=0;
    for(int i=0;i<5;i++)
    {
    	if(o[i].outerp==outerpage)
    	{
    		flagO=1;
    		int id=o[i].id;
    		for(int j=0;j<15;j++)
    		{
    			if(inn[j].id==id && inn[j].innerp==innerpage)
    			{
    				frame=inn[j].frame_no;
    				flagI=1;
    				break;
				}
    			
    		}
			if(flagI==0)
			cout<<"There is no frame associated with "<<innerpage<<" inner page number"<<endl;
			break;
		}
	}
	if(flagO==0)
	cout<<"There is no inner page table associated with "<<outerpage<<" outer page number"<<endl;
    
	else if(flagI==1)
	{
	cout<<"Frame Number ="<<frame<<endl;
    cout<<"Page Size ="<<pow(2,12)<<endl;
    cout<<"Offset ="<<offset<<endl;
    long long int physical_address=frame*pow(2,12)+offset;
    cout<<"Physical Address ="<<physical_address<<endl;
	DecimalToBinary(frame,26,d);
    }
    else 
    cout<<"Page Fault"<<endl;	
}

int main()
{
	int choice;
while(1)
	{
		printf("\n\n\t\t**MAIN MENU**");
		printf("\n\n\t1.MEMORY MANAGEMENT");
		printf("\n\n\t2.SINGLE LEVEL PAGING");
		printf("\n\n\t3.MULTI LEVEL PAGING");
		printf("\n\n\t4.QUIT");

		printf("\n\nENTER YOUR CHOICE::");
	    cin>>choice;
	    switch(choice)
	    {
	    	case 1:
	    		printf("\n\nMEMORY MANAGEMENT::\n");
	    		memorymanagement();
	    		break;
	    	case 2:
	    		printf("\n\nSINGLE LEVEL PAGING\n");
	    		single();
				break;
	    	case 3:
	    		printf("\n\nMULTI LEVEL PAGING::\n");
	    		multi();
				break;
	    	case 4:
	    		exit(0);
	    	default:
			printf("\n\nPLEASE ENTER CORRECT CHOICE!!");	
	    		
		}
}
return 0;
}
